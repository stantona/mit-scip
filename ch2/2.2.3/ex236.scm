(load "../../helpers")

(define (accumulate-n op init seqs)
  (if (null? seqs)
      '()
      (cons (accumulate op init (map (lambda(x) (car x)) seqs))
            (accumulate-n op init (filter pair? (map (lambda(x) (cdr x)) seqs))))))

;; ((1 2 3) (4 5 6) (7 8 9) (10 11 12))
;; (cons (accumulate + 0 '(1 4 7 10)) (cons (accumulate + 0 '(2 5 8 11)) (cons (accumulate + 0 '(3 6 9 12)) '())
;; (cons (accumulate + 0 '(1 4 7 10)) (cons (accumulate + 0 '(2 5 8 11)) (cons 30 '()))
;; (cons (accumulate + 0 '(1 4 7 10)) (cons 26 (cons 30 '())))
;; (cons 22 (cons 26 (cons 30 '())))
;; (cons 22 (cons 26 '(30)))
;; (cons 22 '(26 30))
;; '(22 26 30)
