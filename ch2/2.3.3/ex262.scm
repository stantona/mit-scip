(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((< (car set1) (car set2))
         (cons (car set1)
               (union-set (cdr set1) set2)))
        ((= (car set1) (car set2))
         (cons (car set1)
               (union-set (cdr set1) (cdr set2))))
        ((> (car set1) (car set2))
         (cons (car set2)
               (union-set set1 (cdr set2))))))

;; (1 2 4) (3 4 5)

;;(cons 1 (union-set (2 4) (3 4 5)))
;;(cons 1 (cons 2 (union-set (4) (3 4 5))))
;;(cons 1 (cons 2 (cons 3 (union-set (4) (4 5)))))
;;(cons 1 (cons 2 (cons 3 (cons 4 (union-set () (5))))))
;;(cons 1 (cons 2 (cons 3 (cons 4 (5)))))
;;(cons 1 (cons 2 (cons 3 (4 5))))
;;(cons 1 (cons 2 (3 4 5)))
;;(cons 1 (2 3 4 5)))
;;(1 2 3 4 5)

